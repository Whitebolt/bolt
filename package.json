{
  "name": "@simpo/bolt-server",
  "description": "Bolt NodeJs Server",
  "author": "Whitebolt <hello@whitebolt.net",
  "contributors": [
    {
      "name": "Stephen Simpson",
      "email": "stephen@whitebolt.net"
    },
    {
      "name": "Kristjan Allikas",
      "email": "kris@whitebolt.net"
    }
  ],
  "version": "1.4.4",
  "keywords": [
    "Server",
    "React",
    "Redux",
    "ExpressJs"
  ],
  "peerDependencies": {
    "pm2": "^2.9.1"
  },
  "dependencies": {
    "@babel/cli": "^7.0.0-beta.36",
    "@babel/core": "^7.0.0-beta.36",
    "@babel/plugin-external-helpers": "^7.0.0-beta.36",
    "@babel/plugin-proposal-class-properties": "^7.0.0-beta.36",
    "@babel/plugin-proposal-decorators": "^7.0.0-beta.36",
    "@babel/plugin-proposal-object-rest-spread": "^7.0.0-beta.36",
    "@babel/plugin-syntax-async-generators": "^7.0.0-beta.36",
    "@babel/plugin-syntax-decorators": "^7.0.0-beta.36",
    "@babel/plugin-syntax-jsx": "^7.0.0-beta.36",
    "@babel/plugin-transform-react-jsx": "^7.0.0-beta.36",
    "@babel/plugin-transform-regenerator": "^7.0.0-beta.36",
    "@babel/plugin-transform-runtime": "^7.0.0-beta.36",
    "@babel/preset-env": "^7.0.0-beta.36",
    "@babel/preset-react": "^7.0.0-beta.36",
    "@babel/runtime": "^7.0.0-beta.36",
    "@simpo/ejs": "^2.5.6",
    "@simpo/express-mysql-session": "^1.2.2",
    "@simpo/linux-user": "^0.1.0",
    "@simpo/map-watch": "^1.0.1",
    "@simpo/object-annotations": "^1.0.2",
    "@simpo/rrule": "^2.2.0",
    "@simpo/websocket-express": "^1.0.2",
    "@simpo/binary-message-format": "^1.0.0",
    "babel-plugin-syntax-async-functions": "^7.0.0-beta.0",
    "babel-plugin-transform-async-generator-functions": "^7.0.0-beta.3",
    "babel-plugin-transform-class-properties": "^6.24.1",
    "babel-plugin-transform-decorators": "^6.24.1",
    "babel-plugin-transform-decorators-legacy": "^1.3.4",
    "bcrypt": "^1.0.3",
    "bluebird": "^3.5.1",
    "body-parser": "^1.18.2",
    "chalk": "^2.3.0",
    "chownr": "^1.0.1",
    "connect-mongo": "^2.0.0",
    "dateformat": "^3.0.2",
    "destroy": "^1.0.4",
    "express": "^4.16.2",
    "express-enforces-ssl": "^1.1.0",
    "express-http-proxy": "^1.1.0",
    "express-session": "^1.15.6",
    "figlet": "^1.2.0",
    "find-free-port": "^1.1.0",
    "global-modules": "^1.0.0",
    "gulp-sourcemaps": "^2.6.3",
    "gulp-uglify": "^3.0.0",
    "helmet": "^3.9.0",
    "ical-date-parser": "^4.0.0",
    "iconv-lite": "^0.4.19",
    "inquirer": "^4.0.2",
    "joi": "^13.0.2",
    "lodash": "^4.17.4",
    "lodash-cli": "^4.17.4",
    "md5": "^2.2.1",
    "mime": "^2.1.0",
    "mongo-sql": "^5.0.0",
    "mongodb": "^3.0.1",
    "morgan": "^1.9.0",
    "mysql": "^2.15.0",
    "mysql-promise": "^4.1.0",
    "nginx-o": "^0.1.1",
    "nodemailer": "^4.4.0",
    "passport": "^0.4.0",
    "passport-local": "^1.0.0",
    "prepend-file": "^1.3.1",
    "react": "^16.2.0",
    "react-dom": "^16.2.0",
    "redux": "^3.7.2",
    "require-extra": "^1.5.7",
    "rollup-plugin-babel": "^4.0.0-beta.0",
    "rollup-plugin-commonjs": "^8.2.6",
    "rollup-plugin-json": "^2.3.0",
    "rollup-plugin-node-resolve": "^3.0.0",
    "rollup-stream": "^1.24.1",
    "serve-static": "^1.13.1",
    "shortcode-insert": "^1.0.2",
    "through2": "^2.0.3",
    "topic-subscribe": "^0.10.4",
    "vinyl-buffer": "^1.0.1",
    "vinyl-source-stream": "^2.0.0",
    "yargs": "^10.0.3"
  },
  "main": "./server.js",
  "bin": {
    "bolt": "./server.js"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:ssimpo/bolt-server.git"
  },
  "license": "SEE LICENSE IN LICENSE.md",
  "devDependencies": {
    "chai": "^4.1.2",
    "gulp": "^3.9.1",
    "gulp-jsdoc3": "^1.0.0",
    "mocha": "^4.1.0",
    "mock-env": "^0.2.0"
  },
  "scripts": {
    "test": "snyk test && ./node_modules/mocha/bin/mocha --recursive test",
    "start": "node ./server.js start",
    "build-docs": "gulp doc"
  },
  "config": {
    "port": 3000,
    "portRange": {
      "start": 3000,
      "end": 8000
    },
    "runDirectory": "/var/run/bolt",
    "logLevel": 4,
    "nginx": {
      "user": "www-data",
      "group": "www-data",
      "sitesAvailable": "/etc/nginx/sites-available/",
      "sitesEnabled": "/etc/nginx/sites-enabled/"
    },
    "serverConfigPath": "/etc/bolt",
    "serverConfigFile": "server.json",
    "boltConfigProperties": [
      "port",
      "portRange",
      "root",
      "accessLog",
      "template",
      "databases",
      "secret",
      "development",
      "proxy",
      "eventConsoleLogging",
      "logLevel",
      "version",
      "name",
      "serverName",
      "domains",
      "csp",
      "sessionStore",
      "sessionStoreDb",
      "questions",
      "errors",
      "sslServerCrt",
      "sslServerKey",
      "uid",
      "gid",
      "homeDir",
      "sock",
      "runDirectory",
      "nginx",
      "boltConfigPropsDeleteWhenLive",
      "sessionLength",
      "poweredBy",
      "sessionLength",
      "uploadLimit"
    ],
    "boltConfigPropsDeleteWhenLive": [
      "sessionStore",
      "sessionStoreDb",
      "questions",
      "errors",
      "sslServerCrt",
      "sslServerKey",
      "uid",
      "gid",
      "homeDir",
      "sock",
      "secret",
      "nginx",
      "runDirectory",
      "boltConfigPropsDeleteWhenLive",
      "sessionLength",
      "poweredBy",
      "sessionLength"
    ],
    "boltEnvPrefix": "BOLT",
    "appLaunchExcludes": [
      "pm2",
      "system",
      "config",
      "nginx"
    ],
    "pm2LaunchIncludes": [
      "array",
      "database",
      "config",
      "event",
      "files",
      "function",
      "nginx",
      "object",
      "pm2",
      "string",
      "system",
      "template"
    ],
    "csp": {
      "sandbox": [
        "allow-forms",
        "allow-scripts",
        "allow-popups",
        "allow-same-origin"
      ]
    },
    "eventConsoleLogging": [
      {
        "event": "configLoaded",
        "action": "init",
        "property": "<%= Date().toLocaleString(); %>",
        "description": "server",
        "propertyColour": "green"
      },
      {
        "event": "extraBoltModuleLoaded",
        "action": "load",
        "description": "bolt module"
      },
      {
        "event": "mongoConnected",
        "action": "connect",
        "description": "MongoDb database",
        "propertyColour": "cyan"
      },
      {
        "event": "SQLConnected",
        "action": "connect",
        "description": "SQL database",
        "propertyColour": "cyan"
      },
      {
        "event": "firingControllerMethod",
        "action": "controller",
        "description": "firing controller method <%= params[0] %> for",
        "property": "<%= params[1] %>",
        "level": 4
      },
      {
        "event": "createdPidFile",
        "action": "system",
        "description": "created pid file",
        "property": "<%= params[0] %>",
        "level": 2,
        "propertyColour": "green"
      },
      {
        "event": "removedPidFile",
        "action": "system",
        "description": "removed pid file",
        "property": "<%= params[0] %>",
        "level": 2,
        "propertyColour": "green"
      },
      {
        "event": "firingView",
        "action": "view",
        "description": "firing view <%= params[0] %> for",
        "property": "<%= params[1] %>",
        "level": 4
      },
      {
        "event": "firingTemplate",
        "action": "template",
        "description": "firing template <%= params[0] %> for",
        "property": "<%= params[1] %>",
        "level": 4
      },
      {
        "event": "loadedHook",
        "action": "load",
        "description": "hook"
      },
      {
        "event": "loadedModule",
        "action": "module loaded",
        "description": "<%= params[1] %>ms",
        "level": 1
      },
      {
        "event": "appRunning",
        "action": "running",
        "description": "<%= params[1][0] %>.<%= params[1][1].toString().substr(0,3) %>s"
      },
      {
        "event": "sqlQuery",
        "action": "sql",
        "property": "<%= params[0] %>",
        "propertyColour": "blue",
        "description": "database query",
        "level": 2
      },
      {
        "event": "sqlQueryResults",
        "action": "database result",
        "property": "<%= params[0] %>",
        "propertyColour": "blue",
        "description": "<%= params[1] %> rows",
        "level": 2
      },
      {
        "event": "sqlQueryNoResults",
        "action": "database result",
        "property": "<%= params[0] %>",
        "propertyColour": "blue",
        "typeColour": "yellow",
        "description": "zero rows",
        "level": 2
      },
      {
        "event": "exportBoltToBrowserGlobal",
        "action": "export",
        "property": "<%= params[0].target %>",
        "description": "bolt browser export"
      },
      {
        "event": "exportReactComponentToBrowser",
        "action": "export",
        "property": "<%= params[0].target %>",
        "description": "ReactBolt.<%= params[0].name %>"
      },
      {
        "event": "exportReduxTypesToBrowser",
        "action": "export",
        "property": "<%= params[0].target %>",
        "description": "ReduxBolt.types.<%= params[0].name %>"
      },
      {
        "event": "exportReduxReducersToBrowser",
        "action": "export",
        "property": "<%= params[0].target %>",
        "description": "ReduxBolt.reducers.<%= params[0].name %>"
      },
      {
        "event": "exportReduxActionCreatorsToBrowser",
        "action": "export",
        "property": "<%= params[0].target %>",
        "description": "ReduxBolt.actionCreators.<%= params[0].name %>"
      },
      {
        "event": "loadedRouter",
        "action": "load",
        "description": "router"
      },
      {
        "event": "loadedShortcode",
        "action": "load",
        "description": "shortcode"
      },
      {
        "event": "loadedController",
        "action": "load",
        "description": "controller"
      },
      {
        "event": "loadedSchema",
        "action": "load",
        "description": "schema"
      },
      {
        "event": "loadedComponentView",
        "action": "load",
        "description": "component view"
      },
      {
        "event": "loadedTemplate",
        "action": "load",
        "description": "template"
      },
      {
        "event": "loadedMiddleware",
        "action": "load",
        "description": "middleware"
      },
      {
        "event": "ranMiddleware",
        "action": "run",
        "description": "middleware",
        "propertyColour": "cyan"
      },
      {
        "event": "appListening",
        "action": "listen",
        "description": "Bolt Server on",
        "propertyColour": "green"
      },
      {
        "event": "afterRunApp",
        "action": "loaded",
        "description": "Bolt Server",
        "property": "<%= Date().toLocaleString(); %>",
        "propertyColour": "green"
      }
    ],
    "browserExport": {
      "nodeResolve": {
        "jsnext": true,
        "main": true,
        "extensions": [
          ".js",
          ".json"
        ],
        "browser": true
      },
      "babel": {
        "generatorOpts": {
          "compact": true,
          "quotes": "double",
          "sourceMaps": true
        },
        "presets": [
          [
            "@babel/env",
            {
              "modules": false,
              "targets": {
                "chrome": 30
              },
              "useBuiltIns": false,
              "forceAllTransforms": true
            }
          ]
        ],
        "plugins": [
          "syntax-async-functions",
          "syntax-async-generators",
          "transform-async-generator-functions",
          "@babel/transform-regenerator",
          "@babel/plugin-proposal-object-rest-spread"
        ]
      }
    },
    "errors": {
      "controllerContext": {
        "noProperty": {
          "type": "reference",
          "message": "Property/Method ${name} does not exist for given controller."
        },
        "afterInitProperty": {
          "type": "range",
          "message": "Cannot set properties or methods on controllers after initialisation."
        },
        "afterInitController": {
          "type": "range",
          "message": "Cannot set new controllers after initialisation."
        },
        "controllerAsFunction": {
          "type": "syntax",
          "message": "Cannot run controller as if it is a function."
        },
        "componentAsFunction": {
          "type": "syntax",
          "message": "Cannot run component as if it is a function."
        },
        "noController": {
          "type": "range",
          "message": "Controller ${name} does not exist on given component"
        }
      }
    }
  }
}
